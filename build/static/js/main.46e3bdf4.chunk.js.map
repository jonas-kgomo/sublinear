{"version":3,"sources":["Tasks.tsx","Project.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["linear","LinearClient","apiKey","process","Tasks","useState","user","setUser","useEffect","a","viewer","me","name","displayName","getUser","tasks","setTask","issues","console","log","nodes","length","map","task","title","getTasks","className","item","url","Project","team","projects","teams","e","el","description","App","alt","src","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OAIMA,EAAS,IAAIC,IAAa,CAAEC,OAAQC,qDAsD3BC,MApDf,WACE,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAEAC,qBAAU,WAAM,4CACd,4BAAAC,EAAA,sEACmBT,EAAOU,OAD1B,OACQC,EADR,OAEEJ,EAAQ,eAASI,QAAT,IAASA,OAAT,EAASA,EAAIC,MAAO,MAApB,OAA2BD,QAA3B,IAA2BA,OAA3B,EAA2BA,EAAIE,cAFzC,4CADc,uBAAC,WAAD,wBAKdC,KACC,IAEH,MAAyBT,mBAAgB,IAAzC,mBAAOU,EAAP,KAAcC,EAAd,KAqBA,OAnBAR,qBAAU,WAAM,4CACd,gCAAAC,EAAA,sEACsBT,EAAOiB,SAD7B,OACQF,EADR,OAEEG,QAAQC,IAAR,OAAYJ,QAAZ,IAAYA,OAAZ,EAAYA,EAAOK,OAEnB,OAAIL,QAAJ,IAAIA,GAAJ,UAAIA,EAAOK,aAAX,OAAI,EAAcC,OACX,OAALN,QAAK,IAALA,GAAA,UAAAA,EAAOK,aAAP,SAAcE,KAAI,SAACC,GAAD,OAChBP,GAAQ,SAACD,GAAD,4BAAeA,GAAf,CAAsB,QAACQ,QAAD,IAACA,OAAD,EAACA,EAAMC,eAGvCN,QAAQC,IAAR,kBATJ,2CADc,yBAAC,WAAD,wBAgBdM,KACC,IAGD,sBAAKC,UAAU,OAAf,UACE,qBAAKA,UAAU,OAAf,SACE,oBAAGA,UAAU,SAAb,kBAA4BpB,OAE9B,oBAAGoB,UAAU,aAAb,oBACS,iCAAOX,EAAMM,OAAb,UAET,qBAAKK,UAAU,SAAf,gBACGX,QADH,IACGA,OADH,EACGA,EAAOO,KAAI,SAACK,GAAD,OACV,8BACGA,EADH,IACS,4BAAIA,EAAKC,QADVD,YC5CZ3B,EAAS,IAAIC,IAAa,CAAEC,OAAQC,qDAuC3B0B,MArCf,WACE,MAAwBxB,mBAAgB,IAAxC,mBAAOyB,EAAP,KAAavB,EAAb,KAeA,OAbAC,qBAAU,WAAM,4CACd,gCAAAC,EAAA,sEACsBT,EAAO+B,WAD7B,OAGE,QAFMC,EADR,cAGE,IAAIA,GAAJ,UAAIA,EAAOZ,aAAX,OAAI,EAAcC,OACX,OAALW,QAAK,IAALA,GAAA,UAAAA,EAAOZ,aAAP,SAAcE,KAAI,SAACC,GAAD,OAAUhB,GAAQ,SAACuB,GAAD,4BAAcA,GAAd,CAAoB,CAACP,WAEzDL,QAAQC,IAAR,kBANJ,2CADc,yBAAC,WAAD,wBAUdL,KACC,IAGD,8BAGE,qCACGgB,QADH,IACGA,OADH,EACGA,EAAMR,KAAI,SAACW,EAAGC,GAAJ,OACT,gCAEE,mBAAGR,UAAU,SAAb,gBAAuBO,QAAvB,IAAuBA,OAAvB,EAAuBA,EAAI,GAAGrB,OAC9B,mCAAIqB,QAAJ,IAAIA,OAAJ,EAAIA,EAAI,GAAGE,yBCGRC,MA5Bf,WACE,OACE,sBAAKV,UAAU,MAAf,UACE,4CACY,qBAAKW,IAAI,OAAOC,IAAI,YAAYZ,UAAU,YAGtD,yBAAQA,UAAU,aAAlB,UACE,wBAAQA,UAAU,MAAlB,6BACA,mBAAGA,UAAU,OAAb,2CAEA,cAAC,EAAD,IAEA,sBAAKA,UAAU,YAAf,UACE,qBACEW,IAAI,UACJX,UAAU,WACVY,IAAI,iFAEN,qBAAKZ,UAAU,WAAf,SACE,cAAC,EAAD,gBCZGa,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.46e3bdf4.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { LinearClient } from \"@linear/sdk\";\n\nconst linear = new LinearClient({ apiKey: process.env.REACT_APP_LINEAR_KEY });\n\nfunction Tasks() {\n  const [user, setUser] = useState(\"\");\n\n  useEffect(() => {\n    async function getUser() {\n      const me = await linear.viewer;\n      setUser(\"  | \" + me?.name + \" @\" + me?.displayName); // @profile display\n    }\n    getUser();\n  }, []);\n\n  const [tasks, setTask] = useState<any[]>([]);\n\n  useEffect(() => {\n    async function getTasks() {\n      const tasks = await linear.issues();\n      console.log(tasks?.nodes);\n\n      if (tasks?.nodes?.length) {\n        tasks?.nodes?.map((task) =>\n          setTask((tasks) => [...tasks, [task?.title]])\n        );\n      } else {\n        console.log(` has no issues`);\n      }\n    }\n\n    // console.log(\"length \" + tasks.length, tasks);\n\n    getTasks();\n  }, []);\n\n  return (\n    <div className=\"card\">\n      <div className=\"user\">\n        <p className=\"titles\">User {user}</p>\n      </div>\n      <p className=\"taskNumber\">\n        Tasks| <span>{tasks.length} </span>\n      </p>\n      <div className=\"titles\">\n        {tasks?.map((item) => (\n          <p key={item}>\n            {item} <i>{item.url}</i>\n          </p>\n        ))}\n        {/* <pre>{JSON.stringify(tasks, null, 2)}</pre> */}\n      </div>\n    </div>\n  );\n}\n\nexport default Tasks;\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { LinearClient } from \"@linear/sdk\";\n\nconst linear = new LinearClient({ apiKey: process.env.REACT_APP_LINEAR_KEY });\n\nfunction Project() {\n  const [team, setUser] = useState<any[]>([]);\n\n  useEffect(() => {\n    async function getUser() {\n      const teams = await linear.projects();\n\n      if (teams?.nodes?.length) {\n        teams?.nodes?.map((task) => setUser((team) => [...team, [task]]));\n      } else {\n        console.log(` has no issues`);\n      }\n    }\n    getUser();\n  }, []);\n\n  return (\n    <div>\n      {/* <p>{team?.[0].name}</p>}*/}\n\n      <div>\n        {team?.map((e, el) => (\n          <div>\n            {/* ij <b>{team?.[el].name}</b>  */}\n            <p className=\"titles\">{e?.[0].name}</p>\n            <p>{e?.[0].description}</p>\n          </div>\n        ))}\n      </div>\n\n      {/* <pre>{JSON.stringify(team, null, 2)}</pre> */}\n\n      {/* {team?.[0].description} */}\n    </div>\n  );\n}\n\nexport default Project;\n","import React from \"react\";\n// import logo from \"./logo.png\";\nimport \"./App.css\";\nimport Tasks from \"./Tasks\";\nimport Project from \"./Project\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>\n        Sublinear <img alt=\"logo\" src=\"/logo.png\" className=\"Logo\" />\n      </h1>\n\n      <header className=\"App-header\">\n        <button className=\"btn\">Linear | Notion</button>\n        <p className=\"Sync\">Sync linear tasks with notion</p>\n\n        <Tasks />\n\n        <div className=\"container\">\n          <img\n            alt=\"project\"\n            className=\"App-logo\"\n            src=\"https://raw.githubusercontent.com/jonas-kgomo/sublinear/main/assets/logo.png\"\n          />\n          <div className=\"centered\">\n            <Project />\n          </div>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}